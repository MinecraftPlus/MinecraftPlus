buildscript {
    dependencies {
        if (findProject(':resources') != null) {
            classpath rootProject.project(':resources')
        }
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

repositories {
    mavenCentral()
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net/'
    }
    maven {
        name 'minecraftplus'
        url 'https://maven.minecraftplus.org/'
    }
    maven {
        name 'forge'
        url 'https://maven.minecraftforge.net/'
    }
}

configurations {
    all {
        transitive = false
    }
    checkstyle {
        transitive = true
    }
}

dependencies {
    {libraries}
}

ext {
    DISTRO = '{distro}'
    JAVA = {java_target}
    RESOURCES = '{resources}'
    ASSETS = project(":resources").PATH_BUILD_ASSETS
    NATIVES = {natives}
    SHADE = {shade}
    MAIN_CLASS = [
            server: 'net.minecraft.server.MinecraftServer',
            client: 'net.minecraft.client.main.Main',
            joined: 'net.minecraft.client.main.Main'
    ]
}

group = rootProject.group
version = rootProject.version

archivesBaseName = String.join('-', rootProject.name, project.name)

sourceSets {
    main {
        if (findProject(':resources') != null) {
            resources {
                def resourceSet = project(":resources").sourceSets[RESOURCES as String].resources
                srcDir resourceSet.srcDirs
                setIncludes resourceSet.getIncludes()
            }
        }
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(JAVA)

checkstyle {
    toolVersion = '8.2'
    configFile file(rootProject.PATH_CONFIG_CHECKSTYLE + DISTRO + "/checkstyle.xml")
}

jar {
    manifest {
        attributes 'version': project.version
        attributes 'javaCompliance': project.targetCompatibility
        attributes 'group': project.group
        attributes 'Main-Class': MAIN_CLASS.get(DISTRO)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = 'build'
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = 'build'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (SHADE) {
    apply plugin: 'com.github.johnrengelman.shadow'
    shadowJar {
        classifier = 'bundle'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        // Filter META-INF stuff from dependencies
        exclude 'META-INF/versions/**'
        exclude 'META-INF/maven/**'
        exclude 'META-INF/org/**'
        exclude 'META-INF/services/**'
        exclude 'META-INF/eclipse.inf'
        exclude 'META-INF/ECLIPSE_.*'
        exclude 'META-INF/DEPENDENCIES**'
        exclude 'META-INF/LICENSE**'
        exclude 'META-INF/NOTICE**'
    }
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    if (SHADE) {
        archives shadowJar
    }
}

/*
Miscellaneous, not much important
 */

// Group some task in more meaningful groups
tasks.withType(Checkstyle) {
    group = 'checkstyle'
}
tasks.findAll {it.name.containsIgnoreCase('eclipse') }.each { task ->
    task.group = 'eclipse'
}

