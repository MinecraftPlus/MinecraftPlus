--- a/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -55,7 +55,7 @@
    }
 
    public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorhandle, boolean flag) {
-      return this.mailbox.ask((processorhandle1) -> {
+      return this.mailbox.<ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>>>ask((processorhandle1) -> {
          return new StrictQueue.IntRunnable(0, () -> {
             this.getQueue(processorhandle);
             processorhandle1.tell(ProcessorHandle.of("chunk priority sorter around " + processorhandle.name(), (message) -> {
@@ -66,7 +66,7 @@
    }
 
    public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorhandle) {
-      return this.mailbox.ask((processorhandle1) -> {
+      return this.mailbox.<ProcessorHandle<ChunkTaskPriorityQueueSorter.Release>>ask((processorhandle1) -> {
          return new StrictQueue.IntRunnable(0, () -> {
             processorhandle1.tell(ProcessorHandle.of("chunk priority sorter around " + processorhandle.name(), (release) -> {
                this.release(processorhandle, release.pos, release.task, release.clearQueue);
@@ -137,7 +137,7 @@
       if (chunktaskpriorityqueue == null) {
          throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("No queue for: " + processorhandle));
       } else {
-         return chunktaskpriorityqueue;
+         return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunktaskpriorityqueue;
       }
    }
 
