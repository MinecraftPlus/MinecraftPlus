--- /dev/null
+++ b/net/minecraft/client/renderer/entity/CannonRenderer.java
@@ -0,0 +1,86 @@
+package net.minecraft.client.renderer.entity;
+
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import net.minecraft.world.level.block.RenderShape;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.client.renderer.MultiBufferSource;
+import com.mojang.math.Vector3f;
+import net.minecraft.client.model.CannonModel;
+import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.world.entity.vehicle.Cannon;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
+import net.minecraftforge.api.distmarker.Dist;
+import net.minecraftforge.api.distmarker.OnlyIn;
+
+@OnlyIn(Dist.CLIENT)
+public class CannonRenderer extends EntityRenderer<Cannon>
+{
+    private static final ResourceLocation CANNON_TEXTURE_LOCATION = new ResourceLocation(
+        "textures/entity/cannon/cannon.png");
+    protected final CannonModel model = new CannonModel();
+
+    public CannonRenderer(EntityRenderDispatcher p_i46155_1_) {
+        super(p_i46155_1_);
+        this.shadowRadius = 1.0F;
+    }
+
+    public void render(Cannon p_225623_1_, float p_225623_2_, float p_225623_3_, PoseStack p_225623_4_,
+        MultiBufferSource p_225623_5_, int p_225623_6_) {
+        p_225623_4_.pushPose();
+        p_225623_4_.translate(0.0D, 0.0D, 0.0D);
+        p_225623_4_.mulPose(Vector3f.YP.rotationDegrees(180.0F - p_225623_2_));
+        float f = (float)p_225623_1_.getHurtTime() - p_225623_3_;
+        float f1 = p_225623_1_.getDamage() - p_225623_3_;
+        if (f1 < 0.0F) {
+            f1 = 0.0F;
+        }
+
+        // Animate hurt
+        if (f > 0.0F) {
+            p_225623_4_
+                .mulPose(Vector3f.XP.rotationDegrees(Mth.sin(f) * f * f1 / 10.0F * (float)p_225623_1_.getHurtDir()));
+        }
+
+        // copied from MinecartRenderer
+        int j = p_225623_1_.getDisplayOffset();
+        BlockState blockstate = p_225623_1_.getDisplayBlockState();
+        if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
+            p_225623_4_.pushPose();
+            float f4 = 0.75F;
+            p_225623_4_.scale(0.75F, 0.75F, 0.75F);
+            p_225623_4_.translate(-0.5D, (double)((float)(j - 8) / 16.0F), 0.5D);
+            p_225623_4_.mulPose(Vector3f.YP.rotationDegrees(90.0F));
+            //TODO render trigger when cannon is ready to shoot
+            //this.renderCannonContents(p_225623_1_, p_225623_3_, blockstate, p_225623_4_, p_225623_5_, p_225623_6_);
+            p_225623_4_.popPose();
+        }
+
+        // Lerp rotations
+        float wheelsRotation = Mth.lerp(p_225623_3_, p_225623_1_.animationPositionOld, p_225623_1_.animationPosition);
+        float barrelRotation = Mth.lerp(p_225623_3_, p_225623_1_.xRotO, p_225623_1_.xRot);
+
+        this.model.setupAnim(p_225623_1_, barrelRotation, wheelsRotation, f1, 0.0F, 0.0F);
+        VertexConsumer ivertexbuilder = p_225623_5_
+            .getBuffer(this.model.renderType(this.getTextureLocation(p_225623_1_)));
+        this.model.renderToBuffer(p_225623_4_, ivertexbuilder, p_225623_6_, OverlayTexture.NO_OVERLAY, 1.0F, 1.0F, 1.0F,
+            1.0F);
+
+        p_225623_4_.popPose();
+        super.render(p_225623_1_, p_225623_2_, p_225623_3_, p_225623_4_, p_225623_5_, p_225623_6_);
+    }
+
+    /**
+     * Returns the location of an entity's texture.
+     */
+    public ResourceLocation getTextureLocation(Cannon p_110775_1_) {
+        return CANNON_TEXTURE_LOCATION;
+    }
+
+//    protected void renderCannonContents(Cannon p_225630_1_, float p_225630_2_, BlockState p_225630_3_,
+//        PoseStack p_225630_4_, MultiBufferSource p_225630_5_, int p_225630_6_) {
+//        Minecraft.getInstance().getBlockRenderer().renderSingleBlock(p_225630_3_, p_225630_4_, p_225630_5_, p_225630_6_,
+//            OverlayTexture.NO_OVERLAY);
+//    }
+}
