--- /dev/null
+++ b/net/minecraft/world/item/CannonItem.java
@@ -0,0 +1,72 @@
+package net.minecraft.world.item;
+
+import net.minecraft.stats.Stats;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntitySelector;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.vehicle.Cannon;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.HitResult;
+import net.minecraft.world.phys.Vec3;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResultHolder;
+import java.util.List;
+import java.util.function.Predicate;
+import net.minecraft.world.level.ClipContext;
+import net.minecraft.world.level.Level;
+
+public class CannonItem extends Item
+{
+    private static final Predicate<Entity> ENTITY_PREDICATE = EntitySelector.NO_SPECTATORS.and(Entity::isPickable);
+    private final Cannon.Type type;
+    
+    public CannonItem(Cannon.Type type, Item.Properties properties) {
+        super(properties);
+        this.type = type;
+    }
+
+    public InteractionResultHolder<ItemStack> use(Level p_77659_1_, Player p_77659_2_, InteractionHand p_77659_3_) {
+        ItemStack itemstack = p_77659_2_.getItemInHand(p_77659_3_);
+        HitResult raytraceresult = getPlayerPOVHitResult(p_77659_1_, p_77659_2_, ClipContext.Fluid.ANY);
+        if (raytraceresult.getType() == HitResult.Type.MISS) {
+            return InteractionResultHolder.pass(itemstack);
+        } else {
+            Vec3 vec3d = p_77659_2_.getViewVector(1.0F);
+            double d0 = 5.0D;
+            List<Entity> list = p_77659_1_.getEntities(p_77659_2_,
+                p_77659_2_.getBoundingBox().expandTowards(vec3d.scale(5.0D)).inflate(1.0D), ENTITY_PREDICATE);
+            if (!list.isEmpty()) {
+                Vec3 vec3d1 = p_77659_2_.getEyePosition(1.0F);
+
+                for (Entity entity : list) {
+                    AABB axisalignedbb = entity.getBoundingBox().inflate((double)entity.getPickRadius());
+                    if (axisalignedbb.contains(vec3d1)) {
+                        return InteractionResultHolder.pass(itemstack);
+                    }
+                }
+            }
+
+            if (raytraceresult.getType() == HitResult.Type.BLOCK) {
+                Cannon cannonentity = new Cannon(p_77659_1_, raytraceresult.getLocation().x,
+                    raytraceresult.getLocation().y, raytraceresult.getLocation().z);
+                cannonentity.setType(this.type);
+                cannonentity.yRot = p_77659_2_.yRot;
+                if (!p_77659_1_.noCollision(cannonentity, cannonentity.getBoundingBox().inflate(-0.1D))) {
+                    return InteractionResultHolder.fail(itemstack);
+                } else {
+                    if (!p_77659_1_.isClientSide) {
+                        p_77659_1_.addFreshEntity(cannonentity);
+                        if (!p_77659_2_.abilities.instabuild) {
+                            itemstack.shrink(1);
+                        }
+                    }
+
+                    p_77659_2_.awardStat(Stats.ITEM_USED.get(this));
+                    return InteractionResultHolder.success(itemstack);
+                }
+            } else {
+                return InteractionResultHolder.pass(itemstack);
+            }
+        }
+    }
+}
