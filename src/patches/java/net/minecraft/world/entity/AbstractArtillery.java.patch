--- /dev/null
+++ b/net/minecraft/world/entity/AbstractArtillery.java
@@ -0,0 +1,553 @@
+package net.minecraft.world.entity;
+
+import net.minecraft.world.Container;
+import net.minecraft.world.ContainerListener;
+import net.minecraft.world.Containers;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.MenuProvider;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.Cannonball;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.ArtilleryMenu;
+import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.item.CannonballItem;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.EntityDataSerializers;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.api.distmarker.Dist;
+import net.minecraftforge.api.distmarker.OnlyIn;
+
+public abstract class AbstractArtillery<T> extends Vehicle<T> implements ContainerListener, MenuProvider
+{
+    private static final EntityDataAccessor<Integer> DATA_ID_TYPE = SynchedEntityData.defineId(AbstractArtillery.class,
+        EntityDataSerializers.INT);
+    private static final EntityDataAccessor<Boolean> DATA_ISREADY = SynchedEntityData.defineId(AbstractArtillery.class,
+        EntityDataSerializers.BOOLEAN);
+
+    /** Inventory for explosives and bullet */
+    protected SimpleContainer inventory;
+
+    /** Flag to prevent equipment drop when changing dimensions */
+    private boolean dropEquipment = true;
+
+    /** Incremental angle speed for rotating barrel */
+    private double barrelRotationSpeed;
+
+    private boolean inputSkewBarrel;
+
+    public AbstractArtillery(EntityType<? extends AbstractArtillery<T>> entityType, Level level) {
+        super(entityType, level);
+        this.blocksBuilding = true;
+        this.setDeltaMovement(Vec3.ZERO);
+        this.createInventory();
+    }
+
+    public AbstractArtillery(EntityType<? extends AbstractArtillery<T>> entityType, Level level, double x, double y,
+        double z) {
+        this(entityType, level);
+        this.setPos(x, y, z);
+        this.xo = x;
+        this.yo = y;
+        this.zo = z;
+    }
+
+    @Override
+    protected void defineSynchedData() {
+        super.defineSynchedData();
+        this.entityData.define(DATA_ID_TYPE, WoodType.OAK.ordinal());
+        this.entityData.define(DATA_ISREADY, false);
+    }
+
+    @Override
+    protected float getEyeHeight(Pose p_213316_1_, EntityDimensions p_213316_2_) {
+        return 0.85F;
+    }
+
+    /**
+     * Returns the Y offset from the entity's position for any entity riding this one.
+     */
+    @Override
+    public double getRideHeight() {
+        return 0.35D;
+    }
+
+    /**
+     * Get's the artillery barrel's rotation speed
+     */
+    protected double getBarrelRotationSpeed() {
+        return this.barrelRotationSpeed;
+    }
+
+    /**
+     * Set's the artillery barrel's rotation speed
+     */
+    protected void setBarrelRotationSpeed(double speed) {
+        this.barrelRotationSpeed = speed;
+    }
+
+    /**
+     * Gets the barrel angle of the artillery.
+     */
+    public float getBarrelAngle() {
+        return this.xRot;
+    }
+
+    /**
+     * Gets the barrel allowable minimum angle of the artillery.
+     */
+    public abstract float getBarrelAngleMin();
+
+    /**
+     * Gets the barrel allowable maximum angle of the artillery.
+     */
+    public abstract float getBarrelAngleMax();
+
+    protected int getInventorySize() {
+        return 2;
+    }
+
+    /**
+     * Returns artillery barrel top position
+     */
+    protected Vec3 getBarrelTop() {
+        return this.getEyePosition(1.0F).add(this.getViewVector(1.0F));
+    }
+
+    /**
+     * Checks to see if interacting player is looking on trrigger.
+     */
+    protected abstract boolean isLookingAtTrigger(Player p_70821_1_);
+
+    /**
+     * Checks to see if interacting player is looking on barrel top.
+     */
+    protected abstract boolean isLookingAtBarrel(Player p_70821_1_);
+
+    public abstract Item getDropItem();
+
+    public void setWoodType(AbstractArtillery.WoodType type) {
+        this.entityData.set(DATA_ID_TYPE, type.ordinal());
+    }
+
+    public WoodType getWoodType() {
+        return WoodType.byId(this.entityData.get(DATA_ID_TYPE));
+    }
+
+    /**
+     * Gets the artillery status if is ready to shoot.
+     */
+    public boolean isReady() {
+        return this.getEntityData().get(DATA_ISREADY);
+    }
+
+    public void setReady(boolean ready) {
+        this.getEntityData().set(DATA_ISREADY, ready);
+    }
+
+    public ItemStack getExplosive() {
+        return this.inventory.getItem(0);
+    }
+
+    public void setExplosive(ItemStack explosive) {
+        this.inventory.setItem(0, explosive);
+    }
+
+    public ItemStack getBullet() {
+        return this.inventory.getItem(1);
+    }
+
+    public void setBullet(ItemStack bullet) {
+        this.inventory.setItem(1, bullet);
+    }
+
+    /**
+     * Return shoot power of artillery, which is used to set start velocity of bullet. Calculated power is based on
+     * function {@code ln(x+1)} where x are quantity of explosives.
+     * 
+     * @return shot power based on quantity of explosives loaded
+     */
+    public float getShootPower() {
+        ItemStack explosive = getExplosive();
+        if (!explosive.isEmpty()) {
+            float power = (float)Math.log1p(explosive.getCount());
+            return power;
+        } else
+            return 0.0F;
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        // Clamp barrel rotation to min-max angle
+        this.xRot = Mth.clamp(this.xRot, this.getBarrelAngleMin(), this.getBarrelAngleMax());
+    }
+
+    /**
+     * Called when the artillery is attacked.
+     */
+    @Override
+    public boolean hurt(DamageSource p_70097_1_, float p_70097_2_) {
+        if (!this.level.isClientSide && !this.removed) {
+            if (this.isInvulnerableTo(p_70097_1_)) {
+                return false;
+            } else {
+                this.setHurtDir(-this.getHurtDir());
+                this.setHurtTime(10);
+                this.markHurt();
+                this.setDamage(this.getDamage() + p_70097_2_ * 10.0F);
+                boolean flag = p_70097_1_.getEntity() instanceof Player
+                    && ((Player)p_70097_1_.getEntity()).abilities.instabuild;
+                if (flag || this.getDamage() > 40.0F) {
+                    this.ejectPassengers();
+                    if (flag && !this.hasCustomName()) {
+                        this.remove();
+                    } else {
+                        this.destroy(p_70097_1_);
+                    }
+                }
+
+                return true;
+            }
+        } else {
+            return true;
+        }
+    }
+
+    @Nullable
+    @Override
+    public Entity changeDimension(DimensionType p_212321_1_) {
+        this.dropEquipment = false;
+        Entity entity = super.changeDimension(p_212321_1_);
+        this.dropEquipment = true;
+        return entity;
+    }
+
+    @Override
+    public void remove() {
+        if (!this.level.isClientSide && this.dropEquipment) {
+            Containers.dropContents(this.level, this, this.inventory);
+        }
+
+        super.remove();
+    }
+
+    /**
+     * Same as {@link #remove()} but adds entity drop
+     * 
+     * @param source damage source
+     */
+    public void destroy(DamageSource source) {
+        this.remove();
+        if (this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
+            ItemStack itemstack = new ItemStack(this.getDropItem());
+            if (this.hasCustomName()) {
+                itemstack.setHoverName(this.getCustomName());
+            }
+
+            this.spawnAtLocation(itemstack);
+        }
+    }
+
+    @Override
+    protected void readAdditionalSaveData(CompoundTag nbt) {
+        if (nbt.contains("Type", 8)) {
+            this.setWoodType(WoodType.byName(nbt.getString("Type")));
+        }
+
+        this.createInventory();
+        ListTag listnbt = nbt.getList("Items", 10);
+        for (int i = 0; i < listnbt.size(); ++i) {
+            CompoundTag compoundnbt = listnbt.getCompound(i);
+            int j = compoundnbt.getByte("Slot") & 255;
+            if (j < this.inventory.getContainerSize()) {
+                this.inventory.setItem(j, ItemStack.of(compoundnbt));
+            }
+        }
+    }
+
+    @Override
+    protected void addAdditionalSaveData(CompoundTag nbt) {
+        nbt.putString("Type", this.getWoodType().getName());
+
+        ListTag listnbt = new ListTag();
+        for (int i = 0; i < this.inventory.getContainerSize(); ++i) {
+            ItemStack itemstack = this.inventory.getItem(i);
+            if (!itemstack.isEmpty()) {
+                CompoundTag compoundnbt = new CompoundTag();
+                compoundnbt.putByte("Slot", (byte)i);
+                itemstack.save(compoundnbt);
+                listnbt.add(compoundnbt);
+            }
+        }
+        nbt.put("Items", listnbt);
+    }
+
+    @Override
+    public AbstractContainerMenu createMenu(int containerId, Inventory inventory, Player player) {
+        return new ArtilleryMenu(MenuType.ARTILLERY, containerId, inventory, this.inventory, this);
+    }
+
+    protected void createInventory() {
+        SimpleContainer inventory = this.inventory;
+        this.inventory = new SimpleContainer(this.getInventorySize());
+        if (inventory != null) {
+            inventory.removeListener(this);
+            int i = Math.min(inventory.getContainerSize(), this.inventory.getContainerSize());
+
+            for (int j = 0; j < i; ++j) {
+                ItemStack itemstack = inventory.getItem(j);
+                if (!itemstack.isEmpty()) {
+                    this.inventory.setItem(j, itemstack.copy());
+                }
+            }
+        }
+
+        this.inventory.addListener(this);
+        this.containerChanged(this.inventory);
+    }
+
+    public boolean openInventory(Player player) {
+        if (!this.level.isClientSide && (!this.isVehicle() || !this.hasPassenger(player))) {
+            player.openMenu(this);
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void containerChanged(Container container) {
+        ItemStack explosive = getExplosive();
+        ItemStack bullet = getBullet();
+
+        boolean hasExplosive = !explosive.isEmpty() && explosive.getItem() == Items.GUNPOWDER;
+        boolean hasBullet = !bullet.isEmpty() && bullet.getItem() == Items.CANNONBALL;
+
+        this.setReady(hasExplosive);
+    }
+
+    @Override
+    public boolean interact(Player p_184230_1_, InteractionHand p_184230_2_) {
+        if (p_184230_1_.isSecondaryUseActive()) {
+            return this.openInventory(p_184230_1_);
+        } else {
+            return !this.level.isClientSide ? p_184230_1_.startRiding(this) : false;
+        }
+    }
+
+    /**
+     * Applies the given player interaction to this Entity.
+     */
+    @Override
+    public InteractionResult interactAt(Player p_184199_1_, Vec3 p_184199_2_, InteractionHand p_184199_3_) {
+        ItemStack itemstack = p_184199_1_.getItemInHand(p_184199_3_);
+        if (!itemstack.isEmpty()) {
+            if (itemstack.getItem() == Items.TORCH && this.isLookingAtTrigger(p_184199_1_)) {
+                if (p_184199_1_.isSpectator()) {
+                    return InteractionResult.SUCCESS;
+                } else if (p_184199_1_.level.isClientSide) {
+                    return InteractionResult.CONSUME;
+                } else {
+                    if (this.shoot((ServerPlayer)p_184199_1_)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                }
+            } else if (this.isLookingAtBarrel(p_184199_1_)) {
+                if (p_184199_1_.isSpectator()) {
+                    return InteractionResult.SUCCESS;
+                } else if (p_184199_1_.level.isClientSide) {
+                    return InteractionResult.CONSUME;
+                } else if (itemstack.getItem() instanceof CannonballItem && this.getBullet().isEmpty()) {
+                    this.setBullet(itemstack.split(1));
+                    this.containerChanged(this.inventory);
+
+                    if (this.tickCount > 20) {
+                        this.playSound(SoundEvents.ARTILLERY_LOAD_BULLET, 0.5F, 1.0F);
+                    }
+
+                    return InteractionResult.SUCCESS;
+                } else if (itemstack.getItem() == Items.GUNPOWDER
+                    && this.getExplosive().getCount() < this.getExplosive().getMaxStackSize()) {
+                    if (this.getExplosive().sameItem(itemstack)) {
+                        this.getExplosive().grow(1);
+                        itemstack.shrink(1);
+                    } else {
+                        this.setExplosive(itemstack.split(1));
+                    }
+                    this.containerChanged(this.inventory);
+
+                    if (this.tickCount > 20) {
+                        this.playSound(SoundEvents.ARTILLERY_LOAD_EXPLOSIVE, 0.5F, 1.0F);
+                    }
+
+                    return InteractionResult.SUCCESS;
+                }
+            }
+            return InteractionResult.SUCCESS;
+        }
+
+        return InteractionResult.PASS;
+    }
+
+    /**
+     * Handles artillery shot
+     * 
+     * @param gunner player which fires artillery with torch
+     * @return true if shoot succeed
+     */
+    public boolean shoot(ServerPlayer gunner) {
+        if (this.level.isClientSide) {
+            return false;
+        }
+
+        if (!this.isReady()) {
+            return false;
+        }
+
+        Vec3 vec3dcannonball = this.getBarrelTop();
+        float shootPower = this.getShootPower();
+        float shootDeviation = 2.75F;
+
+        if (!this.level.isClientSide && shootPower > 0) {
+            ItemStack bullet = this.getBullet();
+            if (bullet.getItem() instanceof CannonballItem && !bullet.isEmpty()) { // Release bullet if loaded
+                Cannonball entitycannonball = new Cannonball(this.level, this, gunner,
+                    ((CannonballItem)bullet.getItem()).getType());
+                entitycannonball.setItem(bullet);
+                vec3dcannonball = new Vec3(vec3dcannonball.x, vec3dcannonball.y - entitycannonball.getBbHeight() / 2.0F,
+                    vec3dcannonball.z);
+                entitycannonball.setPos(vec3dcannonball.x, vec3dcannonball.y, vec3dcannonball.z);
+                entitycannonball.shootFromRotation(this, this.getBarrelAngle(), this.yRot, 0.0F, shootPower,
+                    shootDeviation);
+
+                this.level.addFreshEntity(entitycannonball);
+            }
+
+            this.getBullet().setCount(0);
+            this.getExplosive().setCount(0);
+            this.containerChanged(this.inventory);
+        }
+
+        // Add shoot knockback
+        this.setDeltaMovement(
+            this.getDeltaMovement().add(this.getViewVector(1.0F).scale(-Math.log(shootPower + 1.0F))));
+
+        // Play artillery shoot sound @LevelRenderer#levelEvent
+        this.level.levelEvent((Player)null, 4000, new BlockPos(this), 0);
+
+        // Do smoke
+        this.level.levelEvent((Player)null, 2008, new BlockPos(vec3dcannonball), 3);
+
+        return true;
+    }
+
+    boolean old = false;
+    
+    @Override
+    public void positionRider(Entity p_184232_1_) {
+        super.positionRider(p_184232_1_);
+
+        float rot = (float)Math.toRadians(-this.yRot);
+        Vec3 vector = Vec3.Z.yRot(rot).scale(-1.25F);
+        Vec3 riderPos = new Vec3(this.getX(), this.getY() - 0.25F, this.getZ()).add(vector);
+
+        // Eject operator if has collision or not on solid block
+        if (p_184232_1_.horizontalCollision
+            || !p_184232_1_.level.getBlockState(new BlockPos(riderPos)).getMaterial().isSolid()) {
+            p_184232_1_.stopRiding();
+        }
+    }
+
+    /**
+     * Used to control artillery.
+     */
+    @Override
+    protected void controlVehicle() {
+        if (this.isVehicle() && this.inputSkewBarrel) {
+            if (this.inputForward) {
+                this.xRot -= barrelRotationSpeed;
+            }
+
+            if (this.inputBackward) {
+                this.xRot += barrelRotationSpeed;
+            }
+        } else
+            super.controlVehicle();
+    }
+
+    @OnlyIn(Dist.CLIENT)
+    @Override
+    public void setInput(boolean left, boolean right, boolean forward, boolean backward, boolean jump) {
+        super.setInput(left, right, forward, backward, jump);
+        this.inputSkewBarrel = jump;
+    }
+
+    public static enum WoodType
+    {
+        OAK(Blocks.OAK_PLANKS, "oak"), SPRUCE(Blocks.SPRUCE_PLANKS, "spruce"), BIRCH(Blocks.BIRCH_PLANKS, "birch"),
+        JUNGLE(Blocks.JUNGLE_PLANKS, "jungle"), ACACIA(Blocks.ACACIA_PLANKS, "acacia"),
+        DARK_OAK(Blocks.DARK_OAK_PLANKS, "dark_oak");
+
+        private final String name;
+        private final Block planks;
+
+        private WoodType(Block planks, String name) {
+            this.name = name;
+            this.planks = planks;
+        }
+
+        public String getName() {
+            return this.name;
+        }
+
+        public Block getPlanks() {
+            return this.planks;
+        }
+
+        @Override
+        public String toString() {
+            return this.name;
+        }
+
+        public static WoodType byId(int key) {
+            WoodType[] types = values();
+            if (key < 0 || key >= types.length) {
+                key = 0;
+            }
+
+            return types[key];
+        }
+
+        public static WoodType byName(String key) {
+            WoodType[] types = values();
+
+            for (int i = 0; i < types.length; ++i) {
+                if (types[i].getName().equals(key)) {
+                    return types[i];
+                }
+            }
+
+            return types[0];
+        }
+    }
+
+}
