--- /dev/null
+++ b/net/minecraft/world/inventory/CannonMenu.java
@@ -0,0 +1,110 @@
+package net.minecraft.world.inventory;
+
+import net.minecraft.world.Container;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.vehicle.Cannon;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+
+public class CannonMenu extends AbstractContainerMenu
+{
+    private final Container cannonContainer;
+    private final Cannon cannon;
+
+    public CannonMenu(int containerId, Inventory inventory) {
+        this(MenuType.CANNON, containerId, inventory, new SimpleContainer(2), null);
+    }
+
+    public CannonMenu(MenuType<?> menuType, int containerId, Inventory inventory, Container container, Cannon cannon) {
+        super(menuType, containerId);
+        this.cannonContainer = container;
+        this.cannon = cannon;
+
+        checkContainerSize(container, 2);
+
+        container.startOpen(inventory.player);
+
+        // Cannon slots
+        this.addSlot(new Slot(container, 0, 62, 20) {
+            @Override
+            public boolean mayPlace(ItemStack itemstack) {
+                return itemstack.getItem() == Items.GUNPOWDER;
+            }
+
+            @Override
+            public boolean mayPickup(Player player) {
+                return player.abilities.instabuild;
+            }
+        });
+        this.addSlot(new Slot(container, 1, 98, 20) {
+            @Override
+            public int getMaxStackSize() {
+                return 1;
+            }
+
+            @Override
+            public boolean mayPlace(ItemStack itemstack) {
+                return itemstack.getItem() == Items.CANNONBALL || itemstack.getItem() == Items.CANNONBALL_INCENDIARY;
+            }
+        });
+
+        // Player inventory slots
+        for (int i = 0; i < 3; ++i) {
+            for (int j = 0; j < 9; ++j) {
+                this.addSlot(new Slot(inventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
+            }
+        }
+
+        for (int k = 0; k < 9; ++k) {
+            this.addSlot(new Slot(inventory, k, 8 + k * 18, 142));
+        }
+
+    }
+
+    @Override
+    public void removed(Player player) {
+        super.removed(player);
+        this.cannonContainer.stopOpen(player);
+    }
+
+    @Override
+    public boolean stillValid(Player player) {
+        return this.cannonContainer.stillValid(player) && this.cannon.isAlive()
+            && this.cannon.distanceTo(player) < 8.0F;
+    }
+
+    @Override
+    public ItemStack quickMoveStack(Player player, int slotNumber) {
+        ItemStack itemstack = ItemStack.EMPTY;
+        Slot slot = this.slots.get(slotNumber);
+        if (slot != null && slot.hasItem()) {
+            ItemStack itemstack1 = slot.getItem();
+            itemstack = itemstack1.copy();
+            if (slotNumber >= 2 && slotNumber < 38) {
+                if (!this.moveItemStackTo(itemstack1, 0, 1, true)) {
+                    return ItemStack.EMPTY;
+                }
+            } else if (slotNumber == 0 || slotNumber == 1) {
+                if (!this.moveItemStackTo(itemstack1, 2, 38, true)) {
+                    return ItemStack.EMPTY;
+                }
+            }
+
+            if (itemstack1.isEmpty()) {
+                slot.set(ItemStack.EMPTY);
+            } else {
+                slot.setChanged();
+            }
+
+            if (itemstack1.getCount() == itemstack.getCount()) {
+                return ItemStack.EMPTY;
+            }
+
+            slot.onTake(player, itemstack1);
+        }
+
+        return itemstack;
+    }
+}
