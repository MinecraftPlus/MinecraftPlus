--- a/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -26,7 +26,7 @@
 
    public static <T extends LootItemFunction> void register(LootItemFunction.Serializer<? extends T> serializer) {
       ResourceLocation resource = serializer.getName();
-      Class<T> clazz = serializer.getFunctionClass();
+      Class<T> clazz = (Class<T>) serializer.getFunctionClass();
       if (FUNCTIONS_BY_NAME.containsKey(resource)) {
          throw new IllegalArgumentException("Can't re-register item function name " + resource);
       } else if (FUNCTIONS_BY_CLASS.containsKey(clazz)) {
@@ -47,7 +47,7 @@
    }
 
    public static <T extends LootItemFunction> LootItemFunction.Serializer<T> getSerializer(T lootitemfunction) {
-      LootItemFunction.Serializer<T> serializer = FUNCTIONS_BY_CLASS.get(lootitemfunction.getClass());
+      LootItemFunction.Serializer<T> serializer = (LootItemFunction.Serializer<T>) FUNCTIONS_BY_CLASS.get(lootitemfunction.getClass());
       if (serializer == null) {
          throw new IllegalArgumentException("Unknown loot item function " + lootitemfunction);
       } else {
@@ -69,8 +69,8 @@
          };
       default:
          return (itemstack, context) -> {
-            for(BiFunction<ItemStack, LootContext, ItemStack> bifunction : abifunction) {
-               itemstack = bifunction.apply(itemstack, context);
+            for(BiFunction<ItemStack, LootContext, ItemStack> bifunction2 : abifunction) {
+               itemstack = bifunction2.apply(itemstack, context);
             }
 
             return itemstack;
