--- a/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -61,14 +61,14 @@
          return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> {
             return typed.updateTyped(opticfinder, (typedx) -> {
                int[] ai = new int[]{0};
-               Typed<?> typed1 = typedx.updateTyped(opticfinder1, (typed) -> {
-                  Int2ObjectMap<LeavesFix.LeavesSection> map = new Int2ObjectOpenHashMap<>(typed.getAllTyped(opticfinder2).stream().map((typedx) -> {
-                     return new LeavesFix.LeavesSection(typedx, this.getInputSchema());
+               Typed<?> typed1 = typedx.updateTyped(opticfinder1, (typed2) -> {
+                  Int2ObjectMap<LeavesFix.LeavesSection> map = new Int2ObjectOpenHashMap<>(typed2.getAllTyped(opticfinder2).stream().map((typedx1) -> {
+                     return new LeavesFix.LeavesSection(typedx1, this.getInputSchema());
                   }).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavessection) -> {
                      return leavessection;
                   })));
                   if (map.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                     return typed;
+                     return typed2;
                   } else {
                      List<IntSet> list = Lists.newArrayList();
 
@@ -124,8 +124,8 @@
                         }
                      }
 
-                     return typed.updateTyped(opticfinder2, (typedx) -> {
-                        return map.get(typedx.get(DSL.remainderFinder()).get("Y").asInt(0)).write(typedx);
+                     return typed2.updateTyped(opticfinder2, (typedx1) -> {
+                        return map.get(typedx1.get(DSL.remainderFinder()).get("Y").asInt(0)).write(typedx1);
                      });
                   }
                });
@@ -281,7 +281,7 @@
             throw new IllegalStateException("Block state type is not what was expected.");
          } else {
             Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder);
-            this.palette = optional.map((list) -> {
+            this.palette = optional.<List>map((list) -> {
                return list.stream().map(Pair::getSecond).collect(Collectors.toList());
             }).orElse(ImmutableList.of());
             Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
@@ -304,7 +304,7 @@
       public Typed<?> write(Typed<?> typed) {
          return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> {
             return dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())));
-         }).set(this.paletteFinder, this.palette.stream().map((dynamic) -> {
+         }).<List<Pair>>set((OpticFinder)this.paletteFinder, this.palette.stream().map((dynamic) -> {
             return Pair.of(References.BLOCK_STATE.typeName(), dynamic);
          }).collect(Collectors.toList()));
       }
