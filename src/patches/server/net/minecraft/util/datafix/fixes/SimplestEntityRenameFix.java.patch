--- a/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -18,8 +18,8 @@
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> type = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> type1 = this.getOutputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> type = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> type1 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
       Type<Pair<String, String>> type2 = DSL.named(References.ENTITY_NAME.typeName(), DSL.namespacedString());
       if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type2)) {
          throw new IllegalStateException("Entity name type is not what was expected.");
@@ -28,10 +28,10 @@
             return (pair) -> {
                return pair.mapFirst((s) -> {
                   String s1 = this.rename(s);
-                  Type<?> type2 = type.types().get(s);
-                  Type<?> type3 = type1.types().get(s1);
-                  if (!type3.equals(type2, true, true)) {
-                     throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type3, type2));
+                  Type<?> in = type.types().get(s);
+                  Type<?> out = type1.types().get(s1);
+                  if (!out.equals(in, true, true)) {
+                     throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", out, in));
                   } else {
                      return s1;
                   }
